#+TITLE:       Emacs Settings
#+EMAIL:       soonho.kong@gmail.com
#+STARTUP:     odd fold
#+LANGUAGE:    en
#+OPTIONS:     skip:nil toc:nil
#+HTML_HEAD:   <link rel="publisher" href="https://www.cs.cmu.edu/~soonhok" />

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Soonho Kong"
	user-mail-address "soonho.kong@gmail.com")
#+END_SRC

* Platform-dependent
** macOS
*** Map command/option/control
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  (setq mac-control-modifier 'control)
#+END_SRC
*** "ls does not support --dired; see ‘dired-use-ls-dired’ for more details."
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+END_SRC
*** Lion-style Fullscreen
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq ns-use-native-fullscreen nil)
    (add-to-list 'default-frame-alist '(fullscreen . fullboth)))
#+END_SRC
** Linux
*** Fullscreen
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      (progn
	(defun toggle-fullscreen (&optional f)
	  (interactive)
	  (let ((current-value (frame-parameter nil 'fullscreen)))
	    (set-frame-parameter nil 'fullscreen
				 (if (equal 'fullboth current-value)
				     (if (boundp 'old-fullscreen) old-fullscreen nil)
				   (progn (setq old-fullscreen current-value)
					  'fullboth)))))
	(global-set-key [(ctrl f2)] 'toggle-fullscreen)
	(add-hook 'after-make-frame-functions 'toggle-fullscreen)))
#+END_SRC
* Basics
** Display Time
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-use-mail-icon t)
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-locale-environment "en.UTF-8")
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC
** Use PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))
#+END_SRC
** Fonts
  Use [[https://github.com/nathco/Office-Code-Pro][Office Code Pro]].
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :family "Office Code Pro"
		      :height 150
		      :weight 'normal
		      :width 'normal)

#+END_SRC
** Unicode Font Setup
#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :config (unicode-fonts-setup))
#+END_SRC
** Backup Files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
** Turn off newbie stuff
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq wdired-allow-to-change-permissions t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq dabbrev-case-distinction nil)
  (setq dabbrev-case-fold-search nil)
  (setq echo-keystrokes 0.1)
  (setq delete-active-region nil)
  (column-number-mode t)
  (transient-mark-mode t)
  (global-font-lock-mode t)

  (setq font-lock-maximum-decoration t)
  (setq font-lock-maximum-size nil)
  (setq display-time-24hr-format t)
#+END_SRC
** Matching Parens
From https://www.gnu.org/software/emacs/manual/html_node/efaq/Matching-parentheses.html
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (global-set-key "%" 'match-paren)
  (defun match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
	  ((looking-at "\\s)") (forward-char 1) (backward-list 1))
	  (t (self-insert-command (or arg 1)))))
#+END_SRC
** Color Theme
#+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :init
     (load-theme 'doom-dracula t)
     :config
     ;; Global settings (defaults)
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	   doom-themes-enable-italic t) ; if nil, italics is universally disabled
     (setq doom-one-brighter-comments t)

     ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config)

     ;; Enable custom neotree theme (all-the-icons must be installed!)
     (doom-themes-neotree-config)
     ;; or for treemacs users
     (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
     (doom-themes-treemacs-config)

     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config))

   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq doom-modeline-python-executable nil))

#+END_SRC

** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-p" . 'ace-window)
    :config
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-background t)
  )
#+END_SRC

** Diminish
#+BEGIN_SRC
(use-package diminish)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC
** Whitespace Cleanup
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :init (ws-butler-global-mode)
    :config (setq ws-butler-keep-whitespace-before-point nil))
#+END_SRC
** Global unsets
#+BEGIN_SRC emacs-lisp
;; M-` invokes tmm-menubar; disable it.
(global-unset-key "\M-`")
#+END_SRC
** Bind M-` to other-frame
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (global-set-key (kbd "M-`") 'other-frame))
#+END_SRC
** Input method
#+BEGIN_SRC emacs-lisp
  (setq default-input-method 'TeX)
#+END_SRC
** Mouse
#+BEGIN_SRC emacs-lisp
  ;; (xterm-mouse-mode t)
#+END_SRC
** Weather
#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :config
    (setq wttrin-default-cities
	  '("Cambridge MA"
	    "Arlington MA"
	    "Los Altos CA"
	    "Seoul Korea")))
#+END_SRC
** Auto package update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update)
#+END_SRC
** Default Directory
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC
* Useful emacs-lisp libraries
#+BEGIN_SRC emacs-lisp
  (use-package dash)
  (use-package f)
#+END_SRC
* Terminal
From http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/
#+BEGIN_SRC emacs-lisp
  (use-package multi-vterm
    :config
      (setq multi-vterm-program "zsh"))
  (add-hook 'term-mode-hook
	    (lambda ()
	      (setq term-buffer-maximum-size 10000)))
  (defcustom term-unbind-key-list
    '("C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
    "The key list that will need to be unbind."
    :type 'list
    :group 'multi-vterm)

  (defcustom term-bind-key-alist
    '(
      ("C-c C-c" . term-interrupt-subjob)
      ("C-p" . previous-line)
      ("C-n" . next-line)
      ("C-s" . isearch-forward)
      ("C-r" . isearch-backward)
      ("C-m" . term-send-raw)
      ("M-f" . term-send-forward-word)
      ("M-b" . term-send-backward-word)
      ("M-o" . term-send-backspace)
      ("M-p" . term-send-up)
      ("M-n" . term-send-down)
      ("M-M" . term-send-forward-kill-word)
      ("M-N" . term-send-backward-kill-word)
      ("M-r" . term-send-reverse-search-history)
      ("M-," . term-send-input)
      ("M-." . comint-dynamic-complete))
    "The key alist that will need to be bind.
  If you do not like default setup, modify it, with (KEY . COMMAND) format."
    :type 'alist
    :group 'multi-vterm)
  (add-hook 'term-mode-hook
	    (lambda ()
	      (add-to-list 'term-bind-key-alist '("M-[" . multi-vterm-prev))
	      (add-to-list 'term-bind-key-alist '("M-]" . multi-vterm-next))))
  (add-hook 'term-mode-hook
	    (lambda ()
	      (define-key term-raw-map (kbd "C-y") 'term-paste)))
  (defun buffer-exists (bufname) (not (eq nil (get-buffer bufname))))

  (defun soonho-visor-style-terminal ()
    (interactive)
    (let ((name_of_terminal_buffer "*vterminal<1>*"))
      (if (buffer-exists name_of_terminal_buffer)
	  ;; If the terminal buffer exists
	  (if (string= (buffer-name) name_of_terminal_buffer)
	      ;; and we are in the terminal buffer
	      ;; then move to the previous buffer
	      (previous-buffer)
	    ;; otherwise, switch to terminal buffer (move to the other
	    ;; frame in the buffer is there, instead of creating one in
	    ;; the current frame!
	    (switch-to-buffer name_of_terminal_buffer)
	    )
	;; If the terminal buffer doesn't exist, create one
	(multi-vterm)
	)))
  (global-set-key (kbd "M-`") 'soonho-visor-style-terminal)
#+END_SRC
* Helm settings
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (setq helm-mode-fuzzy-match t)
    (setq helm-completion-in-region-fuzzy-match t)
    (setq helm-ff-lynx-style-map t)
    (helm-mode t)
    (diminish 'helm-mode)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-c f r") 'helm-recentf)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z")  'helm-select-action)
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	  helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	  helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	  helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	  helm-ff-file-name-history-use-recentf t))
  (use-package helm-flx
    :config
    (helm-flx-mode t)
    (setq helm-flx-for-helm-find-files t ;; t by default
	  helm-flx-for-helm-locate t) ;; nil by default
    (setq helm-M-x-fuzzy-match                  t
	  helm-bookmark-show-location           t
	  helm-buffers-fuzzy-matching           t
	  helm-completion-in-region-fuzzy-match t
	  helm-file-cache-fuzzy-match           t
	  helm-imenu-fuzzy-match                t
	  helm-mode-fuzzy-match                 t
	  helm-locate-fuzzy-match               t
	  helm-quick-update                     t
	  helm-recentf-fuzzy-match              t
	  helm-semantic-fuzzy-match             t)
    ;; See https://github.com/syl20bnr/spacemacs/issues/13100
  (setq helm-completion-style 'emacs)
  (if (version< emacs-version "27")
      (setq completion-styles '(helm-flex))
    (setq completion-styles '(flex))))

  (use-package helm-rg)
  (use-package helm-company)
  (use-package helm-projectile
    :init
      (helm-projectile-on)
    :config
      (setq projectile-completion-system 'helm))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  ;; Projectile - Project interaction library
  (use-package projectile
    :config
      (setq projectile-enable-caching t)
      (setq ffip-use-rust-fd t)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-switch-project-action 'projectile-dired)
      (add-to-list 'projectile-other-file-alist '("cc" "h")) ;; switch from cc -> h
      (add-to-list 'projectile-other-file-alist '("h" "cc"))
    :bind ("M-o" . 'projectile-find-other-file)
    :hook (after-init . projectile-mode)
    :diminish projectile-mode)
  (use-package projectile-ripgrep)
#+END_SRC
* On-the-fly Syntax Check (Flycheck)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands (flycheck-get-checker-for-buffer
	       flycheck-may-enable-mode)
    :hook (c++-mode . flycheck-mode)
    ;; Spell-check only the comment sections.
    :hook (c++-mode . flyspell-prog-mode)
    :init
      (global-flycheck-mode)
      (diminish 'flycheck-mode "fc")
      (setq flycheck-checker-error-threshold 9999))
#+END_SRC
* Auto Completion (Company)
#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :requires company
    :config
    (company-flx-mode +1))

  (use-package company
    :defer t
    :bind
      (("C-<tab>" . company-complete))
    :init
      (global-company-mode)
    :config
	(set-variable 'company-idle-delay 0.1)
        ; make company-dabbrev case-sensitive
        (set-variable 'company-dabbrev-downcase nil)

    :hook (c++-mode . company-mode)
    :diminish company-mode)

#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode +1))
#+END_SRC

* GIT
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq vc-display-status nil)
    ;; full screen magit-status
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
    (setq magit-last-seen-setup-instructions "1.4.0")
    (setq magit-refresh-status-buffer nil)
    :bind
    (("C-x g" . magit-status)
     :map magit-status-mode-map
     ("q" . magit-quit-session)))
#+END_SRC
** Git Gutter
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
   (use-package git-gutter-fringe
     :ensure t
     :init (global-git-gutter-mode))
 (use-package git-gutter
  :ensure t
  :init (global-git-gutter-mode)))
#+END_SRC
* Editor Config
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :init
      (editorconfig-mode))
#+END_SRC
* Dash
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (use-package dash-at-point
      :ensure t
      :config
      (add-to-list 'dash-at-point-mode-alist '(c++-mode . "cpp"))
      (add-to-list 'dash-at-point-mode-alist '(python-mode . "python"))
      :bind (("C-c d" . dash-at-point))))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
                                        ; using any means: via a hook or by user
                                        ; Feel free to add more commands to this
                                        ; list to suit your needs.
  :init ; stuff to do before requiring the package
  (progn
    (add-hook 'prog-mode-hook #'yas-minor-mode))
  :config ; stuff to do after requiring the package
  (progn
    (yas-reload-all)))
#+END_SRC

* Language-Specific
** C++
*** Basics
https://github.com/ludwigpacifici/modern-cpp-font-lock
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
#+END_SRC

Open .h files in c++-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defconst my-cc-style
    '("cc-mode"
      (indent-tabs-mode . nil)                     ; use spaces rather than tabs
      (c-basic-offset . 2)                         ; indent by four spaces
      (c-offsets-alist . ((innamespace . [0])))))  ; No indent for C++ namespaces.
  (c-add-style "my-cc-mode" my-cc-style)
  (add-hook 'c++-mode-hook '(lambda () (c-set-style "my-cc-mode")))
#+END_SRC

*** fic-mode
Show FIXME/TODO/BUG(...) in special face only in comments and strings
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :hook (c++-mode . fic-mode))
#+END_SRC
*** ELDOC
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :hook (c++-mode . eldoc-mode)
  :diminish eldoc-mode)
#+END_SRC
*** LSP
Adjust gc-cons-threshold. The default setting is too low for
lsp-mode's needs due to the fact that client/server communication
generates a lot of memory/garbage.

Set it to big number(100mb) like most of the popular starter kits like
Spacemacs/Doom/Prelude, etc do:
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
#+END_SRC

Increase the amount of data which Emacs reads from the process. Again
the emacs default is too low 4k considering that the some of the
language server responses are in 800k - 3M range.
#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 3 1024 1024)) ;; 3mb
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)

  (use-package lsp-mode
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    :init
    (setq lsp-keymap-prefix "s-l")
    (setq lsp-auto-guess-root t)       ; Detect project root
    (setq lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck
    (setq lsp-enable-xref t)
    (setq lsp-before-save-edits nil)
    (setq lsp-idle-delay 0.500)
    (setq lsp-enable-file-watchers nil)

    :hook ((c++-mode . lsp)
	   (python-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :config
    ;; `-background-index' requires clangd v8+!
    (setq lsp-clients-clangd-args '("--header-insertion=iwyu"
				    "--limit-results=0"
				    "--suggest-missing-includes"
				    "--clang-tidy"
    ))
    :commands lsp)

  (use-package lsp-ui
    :requires lsp-mode flycheck
    :config
    (setq lsp-ui-doc-enable t
	  lsp-ui-doc-use-childframe t
	  lsp-ui-doc-position 'top
	  lsp-ui-doc-include-signature t
	  lsp-ui-sideline-enable nil
	  lsp-ui-flycheck-enable t
	  lsp-ui-flycheck-list-position 'right
	  lsp-ui-flycheck-live-reporting t
	  lsp-ui-peek-enable t
	  lsp-ui-peek-list-width 60
	  lsp-ui-peek-peek-height 25)

    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (setq lsp-completion-provider :capf)


  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package dap-mode)
#+END_SRC
*** company-c-headers
(use-package company-c-headers
  :ensure t)
*** Clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format)

  ;; Indent C/C++ using clang-format
  (fset 'c-indent-region 'clang-format-region)

  (use-package f)
  (defun find-file-in-parents (filename &optional dir)
    "Finds filename in parent directories and returns one if
       exists. Otherwise returns nil."
    (unless dir (setq dir (f-dirname (buffer-file-name))))
    (let ((parent (f-parent dir)))
      (unless (f-root? parent)
	(if (f-exists? (f-expand filename dir))
	    dir
	  (find-file-in-parents filename parent)))))

  (defcustom do-clang-format-buffer-on-save t
    "Run clang-format-buffer on save if there is .clang-format file in the project.")

  (defun toggle-use-clang-format()
    (interactive)
    (setq do-clang-format-buffer-on-save (not do-clang-format-buffer-on-save)))

  (defun run-clang-format-if-c++-mode-before-save-hook()
    "If the following conditions met, run git-clang-format.
      - It's in c++-mode and
      - .clang-format exists in parent directories and
      - .no-clang-format does *not* exist in parent directories."
    (when (and do-clang-format-buffer-on-save (eq major-mode 'c++-mode))
      (let ((clang-format-root (find-file-in-parents ".clang-format"))
	    (no-clang-format-root (find-file-in-parents ".no-clang-format")))
	(cond (no-clang-format-root nil)
	      (clang-format-root
	       (clang-format-buffer))))))

  (add-hook 'before-save-hook
	    #'run-clang-format-if-c++-mode-before-save-hook)
#+END_SRC
** Bazel
#+BEGIN_SRC emacs-lisp
  (use-package bazel-mode
      :ensure nil
      :init
      (setq bazel-mode-buildifier-before-save t)
      :mode (("\\.bazel\\'"  . bazel-mode)
	     ("\\.bzl\\'" . bazel-mode)
	     ("WORKSPACE\\'"  . bazel-mode)))
  (require 'bazel-mode)
  (require 'bazel-build)
#+END_SRC
** SMT2
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (cons '("\\.smt2$" . lisp-mode) auto-mode-alist))
  (use-package lispy)
#+END_SRC
** Python
From https://realpython.com/emacs-the-best-python-editor/
#+BEGIN_SRC emacs-lisp
  (use-package py-isort)
  (use-package elpy
    :ensure t
    :defer t
    :hook (elpy-mode . flycheck-mode)
    :init
    (advice-add 'python-mode :before 'elpy-enable))
  (setq elpy-rpc-python-command "python3")
  (setq python-shell-interpreter "python3")
  (use-package yapfify)
  (use-package poetry
    :ensure t)
#+END_SRC
* LaTeX / AucTeX
#+BEGIN_SRC emacs-lisp
  (use-package latex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;;set up AUCTeX to deal with multiple file documents.
    (setq-default TeX-master nil)
    ;; (setq-default TeX-master nil)
    (add-to-list 'TeX-command-list
		 '("LaTeXMK"
		   "latexmk -pvc -CF -xelatex %s"
		   TeX-run-TeX nil t) t)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(company-mode)
		(turn-on-reftex)
		(setq reftex-plug-into-AUCTeX t)
		(reftex-isearch-minor-mode)
		(setq TeX-PDF-mode t)
		(setq TeX-source-correlate-method 'synctex)
		(setq TeX-source-correlate-start-server t)
		(setq TeX-command-default "LaTeXMK")
		))

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
	      #'TeX-revert-document-buffer)

    ;; Setup skim for Mac.
    (when (string= system-type "darwin")
      (progn
	;; Default Viewer = Skim
	;; Note: In Skim > Preference > Sync : Choose Custom preset and set "/usr/local/bin/emacsclient" as command!
	(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
	(setq TeX-view-program-list
	      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
	)
      )
    )
#+END_SRC

* rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  ;; Projectile - Project interaction library
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
* W3M
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :commands (w3m-browse-url w3m-find-file)
    :bind
    (:map w3m-mode-map
	  ("C-n"  . w3m-next-anchor)
	  ("C-p"  . w3m-previous-anchor)
	  ([up]   . previous-line)
	  ([down] . next-line)))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  ;; Directory operations
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
	   ("C-c C-p" . wdired-change-to-wdired-mode))
    :config
    ;; Always delete and copy recursively
    (setq dired-recursive-deletes 'always
	  dired-recursive-copies 'always)

    (when sys/macp
      ;; Suppress the warning: `ls does not support --dired'.
      (setq dired-use-ls-dired nil)

      (when (executable-find "gls")
	;; Use GNU ls as `gls' from `coreutils' if available.
	(setq insert-directory-program "gls")))

    (when (or (and sys/macp (executable-find "gls"))
	      (and (not sys/macp) (executable-find "ls")))
      ;; Using `insert-directory-program'
      (setq ls-lisp-use-insert-directory-program t)

      ;; Show directory first
      (setq dired-listing-switches "-alh --group-directories-first")

      ;; Quick sort dired buffers via hydra
      (use-package dired-quick-sort
	:bind (:map dired-mode-map
	       ("S" . hydra-dired-quick-sort/body))))

    ;; Allow rsync from dired buffers
    (use-package dired-rsync
      :bind (:map dired-mode-map
	     ("C-c C-r" . dired-rsync)))

    ;; Colourful dired
    (use-package diredfl
      :init (diredfl-global-mode 1))

    ;; Shows icons
    (use-package all-the-icons-dired
      :diminish
      :functions (dired-move-to-filename
		  dired-get-filename
		  my-all-the-icons-dired--display)
      :commands all-the-icons-dired--display
      :custom-face (all-the-icons-dired-dir-face ((t (:foreground nil))))
      :hook (dired-mode . all-the-icons-dired-mode)
      :config
      (declare-function all-the-icons-octicon 'all-the-icons)
      (declare-function all-the-icons-match-to-alist 'all-the-icons)
      (declare-function all-the-icons-dir-is-submodule 'all-the-icons)
      (defun my-all-the-icons-dired--display ()
	"Display the icons of files without colors in a dired buffer."
	(when dired-subdir-alist
	  (let ((inhibit-read-only t)
		(remote-p (and (fboundp 'tramp-tramp-file-p)
			       (tramp-tramp-file-p default-directory))))
	    (save-excursion
	      ;; TRICK: Use TAB to align icons
	      (setq-local tab-width 1)
	      (goto-char (point-min))
	      (while (not (eobp))
		(when (dired-move-to-filename nil)
		  (insert " ")
		  (let ((file (dired-get-filename 'verbatim t)))
		    (unless (member file '("." ".."))
		      (let ((filename (file-local-name (dired-get-filename nil t))))
			(if (file-directory-p filename)
			    (let ((icon (cond
					 (remote-p
					  (all-the-icons-octicon "file-directory"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((file-symlink-p filename)
					  (all-the-icons-octicon "file-symlink-directory"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((all-the-icons-dir-is-submodule filename)
					  (all-the-icons-octicon "file-submodule"
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 ((file-exists-p (format "%s/.git" filename))
					  (all-the-icons-octicon "repo"
								 :height 1.1
								 :v-adjust all-the-icons-dired-v-adjust
								 :face 'all-the-icons-dired-dir-face))
					 (t (let ((matcher (all-the-icons-match-to-alist
							    file all-the-icons-dir-icon-alist)))
					      (apply (car matcher)
						     (list (cadr matcher)
							   :face 'all-the-icons-dired-dir-face
							   :v-adjust all-the-icons-dired-v-adjust)))))))
			      (insert icon))
			  (insert (all-the-icons-icon-for-file file :v-adjust all-the-icons-dired-v-adjust))))
		      (insert "\t "))))   ; Align and keep one space for refeshing after operations
		(forward-line 1))))))
      (advice-add #'all-the-icons-dired--display :override #'my-all-the-icons-dired--display))

    ;; Extra Dired functionality
    (use-package dired-aux :ensure nil)
    (use-package dired-x
      :ensure nil
      :demand
      :config
      (let ((cmd (cond
		  (sys/mac-x-p "open")
		  (sys/linux-x-p "xdg-open")
		  (sys/win32p "start")
		  (t ""))))
	(setq dired-guess-shell-alist-user
	      `(("\\.pdf\\'" ,cmd)
		("\\.docx\\'" ,cmd)
		("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
		("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
		("\\.\\(?:xcf\\)\\'" ,cmd)
		("\\.csv\\'" ,cmd)
		("\\.tex\\'" ,cmd)
		("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
		("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
		("\\.html?\\'" ,cmd)
		("\\.md\\'" ,cmd))))

      (setq dired-omit-files
	    (concat dired-omit-files
		    "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*\\|^bazel-*"))))

  ;; `find-dired' alternative using `fd'
  (when (executable-find "fd")
    (use-package fd-dired))
#+END_SRC
* Fin
#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
#+END_SRC
